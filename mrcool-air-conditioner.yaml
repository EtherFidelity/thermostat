substitutions:
  name_of_device: "bedroom-ac"
  topic_current_temp: "Devices/Air-Conditioners/Bedroom/current_temperature"
  topic_target_mode: "Devices/Air-Conditioners/Bedroom/target_mode"

esphome:
  name: ${name_of_device}
  platform: ESP8266
  board: esp12e
  name_add_mac_suffix: false

# Enable logging
logger:
  baud_rate: 0

# Enable Home Assistant API
api:
  encryption:
    key: "[redacted]"

ota:
  password: "[redacted]"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: ${name_of_device} Fallback AP"
    password: "[redacted]"

mqtt:
  broker: !secret mqtt_broker
  username: !secret mqtt_user
  password: !secret mqtt_password
  reboot_timeout: 0s
  topic_prefix: null
  discovery: false
  log_topic: null

captive_portal:

uart:
  tx_pin: 1
  rx_pin: 3
  baud_rate: 9600

remote_transmitter:
  pin: GPIO5
  carrier_duty_percent: 50%

climate:
  - platform: midea
    id: tstat
    name: Midea Climate         # Use a unique name.
    period: 1s                  # Optional
    timeout: 2s                 # Optional
    num_attempts: 3             # Optional
    autoconf: true              # Autoconfigure most options.
    beeper: true                # Beep on commands.
    visual:                     # Optional. Example of visual settings override.
      min_temperature: 17 °C    # min: 17
      max_temperature: 30 °C    # max: 30
      temperature_step: 0.5 °C  # min: 0.5
    supported_modes:            # All capabilities in this section detected by autoconf.
      - FAN_ONLY                # This capability is always used.
      - HEAT_COOL
      - COOL
      - HEAT
      - DRY
    custom_fan_modes:
      - SILENT
      - TURBO
    supported_presets:          # All capabilities in this section detected by autoconf.
      - ECO
      - BOOST
      - SLEEP                   # This capability is always used.
    custom_presets:             # All capabilities in this section detected by autoconf.
      - FREEZE_PROTECTION
    supported_swing_modes:
      - VERTICAL                # This capability is always used.
      #- HORIZONTAL
      #- BOTH
    outdoor_temperature:        # Optional. Outdoor temperature sensor (may display incorrect values after long inactivity).
      name: "Outdoor Temperature"
    power_usage:                # Optional. Power usage sensor (only for devices that support this feature).
      name: Power
    #humidity_setpoint:          # Optional. Indoor humidity sensor (only for devices that support this feature).
    #  name: "Unit Humidity"

text_sensor:
  - platform: mqtt_subscribe
    id: current_temperature
    topic: ${topic_current_temp}
    on_value:
      midea_ac.follow_me:
        temperature: !lambda "return stoi(id(current_temperature).state);"
        beeper: false

  - platform: mqtt_subscribe
    id: target_mode
    name: "Thermostat Target Mode"
    topic: ${topic_target_mode}
    on_value:
      - if:
          condition:
              - text_sensor.state:
                  id: target_mode
                  state: "low_cooling"
          then:
              - script.execute: ac_cool
      - if:
          condition:
              - text_sensor.state:
                  id: target_mode
                  state: "high_cooling"
          then:
              - script.execute: ac_high_cool
      - if:
          condition:
              - text_sensor.state:
                  id: target_mode
                  state: "low_heating"
          then:
              - script.execute: ac_heat
      - if:
          condition:
              - text_sensor.state:
                  id: target_mode
                  state: "high_heating"
          then:
              - script.execute: ac_high_heat
      - if:
          condition:
              - text_sensor.state:
                  id: target_mode
                  state: "idling"
          then:
              - script.execute: ac_idle
      - if:
          condition:
              - text_sensor.state:
                  id: target_mode
                  state: "off"
          then:
              - script.execute: ac_off

switch:
  - platform: template
    name: Beep on Change
    icon: mdi:volume-source
    optimistic: true
    turn_on_action:
      midea_ac.beeper_on:
    turn_off_action:
      midea_ac.beeper_off:

button:
  - platform: template
    name: Display Toggle
    id: display_toggle
    icon: mdi:theme-light-dark
    on_press:
      midea_ac.display_toggle:

globals:
   - id: display_is_on
     type: bool
     restore_value: no
     initial_value: 'true'

script:
  - id: turn_display_on
    then:
      - lambda: |-
          if (!id(display_is_on)) {
            id(display_toggle).press();
            id(display_is_on) = true;
          }

  - id: turn_display_off
    then:
      - lambda: |-
          if (id(display_is_on)) {
            id(display_toggle).press();
            id(display_is_on) = false;
          }

  - id: ac_cool
    then:
      - lambda: |-
          auto mode_call = id(tstat).make_call();
          mode_call.set_mode("COOL");
          mode_call.set_fan_mode("AUTO");
          mode_call.set_target_temperature(stoi(id(current_temperature).state - 3);
          mode_call.perform();
      - script.execute: turn_display_off

  - id: ac_high_cool
    then:
      - lambda: |-
          auto mode_call = id(tstat).make_call();
          mode_call.set_mode("COOL");
          mode_call.set_fan_mode("AUTO");
          mode_call.set_target_temperature(stoi(id(current_temperature).state - 5);
          mode_call.perform();
      - script.execute: turn_display_off

  - id: ac_heat
    then:
      - lambda: |-
          auto mode_call = id(tstat).make_call();
          mode_call.set_mode("HEAT");
          mode_call.set_fan_mode("AUTO");
          mode_call.set_target_temperature(stoi(id(current_temperature).state + 3);
          mode_call.perform();
      - script.execute: turn_display_off

  - id: ac_high_heat
    then:
      - lambda: |-
          auto mode_call = id(tstat).make_call();
          mode_call.set_mode("HEAT");
          mode_call.set_fan_mode("AUTO");
          mode_call.set_target_temperature(stoi(id(current_temperature).state + 5);
          mode_call.perform();
      - script.execute: turn_display_off

  - id: ac_idle
    then:
      - lambda: |-
          auto mode_call = id(tstat).make_call();
          mode_call.set_mode("FAN_ONLY");
          mode_call.set_fan_mode("AUTO");
          mode_call.perform();
      - script.execute: turn_display_off

  - id: ac_off
    then:
      - lambda: |-
          auto mode_call = id(tstat).make_call();
          mode_call.set_mode("OFF");
          mode_call.perform();
      - lambda: id(display_is_on) = true;
